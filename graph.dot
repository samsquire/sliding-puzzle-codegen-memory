digraph G {"start" -> "mov %rax, (%rdx)";
"mov %rax, (%rdx)" -> "mov %rbx, (%rbx)";
"mov %rbx, (%rbx)" -> "mov %rcx, (%rcx)";
"mov %rcx, (%rcx)" -> "mov %rdx, (%rsp)";
"mov %rdx, (%rsp)" -> "mov %rax, %rbp";
"mov %rdx, (%rsp)" -> "mov %rcx, %rbp";
"mov %rdx, (%rsp)" -> "mov %rdx, %rbp";
"mov %rdx, %rbp" -> "mov $-1, %rbp";
"mov %rdx, %rbp" -> "mov %rax, %rdx";
"mov %rax, %rdx" -> "mov %rdi, %rdx";
"mov %rax, %rdx" -> "mov %rbp, %rdx";
"mov %rax, %rdx" -> "mov %rax, %rsp";
"mov %rax, %rsp" -> "mov %rcx, %rax";
"mov %rax, %rsp" -> "mov %rbx, %rax";
"mov %rax, %rsp" -> "mov %rdi, %rax";
"mov %rax, %rsp" -> "mov %rbp, %rax";
"mov %rax, %rsp" -> "mov %rcx, %rdx";
"mov %rax, %rsp" -> "mov %rbx, %rdx";
"mov %rax, %rsp" -> "mov %rdi, %rdx";
"mov %rax, %rsp" -> "mov %rbp, %rdx";
"mov %rax, %rsp" -> "call minus1(rdi=-1) -> rax=4";
"mov %rax, %rdx" -> "mov %rcx, %rsp";
"mov %rax, %rdx" -> "mov %rdx, %rsp";
"mov %rax, %rdx" -> "mov %rbx, %rsp";
"mov %rax, %rdx" -> "mov %rbp, %rsp";
"mov %rax, %rdx" -> "mov %rax, %rdi";
"mov %rax, %rdx" -> "call minus1(rsp=-1) -> rax=4";
"mov %rdx, %rbp" -> "mov %rcx, %rdx";
"mov %rdx, %rbp" -> "mov %rbx, %rdx";
"mov %rdx, %rbp" -> "mov %rsp, %rdx";
"mov %rdx, %rbp" -> "mov %rdi, %rdx";
"mov %rdx, %rbp" -> "mov %rax, %rsp";
"mov %rdx, %rbp" -> "mov %rcx, %rsp";
"mov %rdx, %rbp" -> "mov %rdx, %rsp";
"mov %rdx, %rbp" -> "call minus1(rsp=-1) -> rdx=4";
"mov %rdx, (%rsp)" -> "mov %rbx, %rbp";
"mov %rbx, %rbp" -> "mov $-1, %rbp";
"mov %rbx, %rbp" -> "mov %rcx, %rbp";
"mov %rbx, %rbp" -> "mov %rdx, %rbp";
"mov %rbx, %rbp" -> "mov %rsp, %rbp";
"mov %rbx, %rbp" -> "mov %rdi, %rbp";
"mov %rbx, %rbp" -> "call minus1(rsp=-1) -> rbx=4";
"mov %rdx, (%rsp)" -> "call minus1(rsp=-1) -> rsp=4";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rax, %rsp";
"mov %rax, %rsp" -> "mov %rdi, %rsp";
"mov %rax, %rsp" -> "mov %rbp, %rsp";
"mov %rax, %rsp" -> "mov %rax, %rdi";
"mov %rax, %rsp" -> "mov %rcx, %rdi";
"mov %rax, %rsp" -> "mov %rdx, %rdi";
"mov %rax, %rsp" -> "mov %rbx, %rdi";
"mov %rax, %rsp" -> "mov %rsp, %rdi";
"mov %rax, %rsp" -> "mov %rax, %rbp";
"mov %rax, %rsp" -> "call minus1(rdi=-1) -> rax=4";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rcx, %rsp";
"mov %rcx, %rsp" -> "mov %rdi, %rsp";
"mov %rcx, %rsp" -> "mov %rbp, %rsp";
"mov %rcx, %rsp" -> "mov %rax, %rdi";
"mov %rcx, %rsp" -> "mov %rcx, %rdi";
"mov %rcx, %rsp" -> "mov %rdx, %rdi";
"mov %rcx, %rsp" -> "mov %rbx, %rdi";
"mov %rcx, %rsp" -> "mov %rsp, %rdi";
"mov %rcx, %rsp" -> "mov %rax, %rbp";
"mov %rcx, %rsp" -> "call minus1(rdi=-1) -> rcx=4";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rdx, %rdi";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rbx, %rdi";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rsp, %rdi";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rax, %rbp";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rcx, %rbp";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rdx, %rbp";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rbx, %rbp";
"call minus1(rdi=-1) -> rcx=4" -> "mov %rsp, %rbp";
"call minus1(rdi=-1) -> rcx=4" -> "call fourtofive(rcx=4) -> rcx=5";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rdx, %rsp";
"mov %rdx, %rsp" -> "mov %rcx, %rbp";
"mov %rdx, %rsp" -> "mov %rdx, %rbp";
"mov %rdx, %rsp" -> "mov %rbx, %rbp";
"mov %rdx, %rsp" -> "mov %rsp, %rbp";
"mov %rdx, %rsp" -> "call minus1(rdi=-1) -> rdx=4";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rbx, %rsp";
"mov %rbx, %rsp" -> "mov %rcx, %rbp";
"mov %rbx, %rsp" -> "mov %rdx, %rbp";
"mov %rbx, %rsp" -> "mov %rbx, %rbp";
"mov %rbx, %rsp" -> "mov %rsp, %rbp";
"mov %rbx, %rsp" -> "call minus1(rdi=-1) -> rbx=4";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rdx, %rdi";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rbx, %rdi";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rsp, %rdi";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rax, %rbp";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rcx, %rbp";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rdx, %rbp";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rbx, %rbp";
"call minus1(rdi=-1) -> rbx=4" -> "mov %rsp, %rbp";
"call minus1(rdi=-1) -> rbx=4" -> "call fourtofive(rbx=4) -> rbx=5";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rdi, %rsp";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rbp, %rsp";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rax, %rdi";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rcx, %rdi";
"call minus1(rsp=-1) -> rsp=4" -> "call fourtofive(rsp=4) -> rsp=5";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rax, %rsp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rcx, %rsp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rdx, %rsp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rbx, %rsp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rdi, %rsp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rbp, %rsp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rax, %rdi";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rcx, %rdi";
"call fourtofive(rsp=4) -> rsp=5" -> "call fivetosix(rsp=5) -> rsp=6";
"call fivetosix(rsp=5) -> rsp=6" -> "mov %rbx, %rbp";
"call fivetosix(rsp=5) -> rsp=6" -> "mov %rsp, %rbp";
"mov %rcx, (%rcx)" -> "mov %rax, %rsp";
"mov %rcx, (%rcx)" -> "mov %rcx, %rsp";
"mov %rcx, (%rcx)" -> "mov %rdx, %rsp";
"mov %rcx, (%rcx)" -> "mov %rbx, %rsp";
"mov %rcx, (%rcx)" -> "mov %rax, %rdi";
"mov %rcx, (%rcx)" -> "mov %rcx, %rdi";
"mov %rcx, (%rcx)" -> "mov %rdx, %rdi";
"mov %rcx, (%rcx)" -> "mov %rbx, %rdi";
"mov %rcx, (%rcx)" -> "call minus1(rsp=-1) -> rsp=4";
"mov %rbx, (%rbx)" -> "mov %rax, %rsp";
"mov %rbx, (%rbx)" -> "mov %rcx, %rsp";
"mov %rbx, (%rbx)" -> "mov %rdx, %rsp";
"mov %rbx, (%rbx)" -> "mov %rbx, %rsp";
"mov %rbx, (%rbx)" -> "mov %rax, %rdi";
"mov %rbx, (%rbx)" -> "mov %rcx, %rdi";
"mov %rbx, (%rbx)" -> "mov %rdx, %rdi";
"mov %rbx, (%rbx)" -> "mov %rbx, %rdi";
"mov %rbx, (%rbx)" -> "call minus1(rsp=-1) -> rsp=4";
"mov %rax, (%rdx)" -> "mov %rax, %rsp";
"mov %rax, (%rdx)" -> "mov %rcx, %rsp";
"mov %rax, (%rdx)" -> "mov %rdx, %rsp";
"mov %rax, (%rdx)" -> "mov %rbx, %rsp";
"mov %rax, (%rdx)" -> "mov %rax, %rdi";
"mov %rax, (%rdx)" -> "mov %rcx, %rdi";
"mov %rax, (%rdx)" -> "mov %rdx, %rdi";
"mov %rax, (%rdx)" -> "mov %rbx, %rdi";
"mov %rax, (%rdx)" -> "call minus1(rsp=-1) -> rsp=4";
"start" -> "mov %rax, %rbp";
"start" -> "mov %rcx, %rbp";
"start" -> "mov %rdx, %rbp";
"start" -> "mov %rbx, %rbp";
"start" -> "call minus1(rsp=-1) -> rsp=4";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rax, (%rdx)";
"mov %rax, (%rdx)" -> "mov %rbx, (%rbx)";
"mov %rbx, (%rbx)" -> "mov %rcx, (%rcx)";
"mov %rcx, (%rcx)" -> "mov %rdx, (%rdi)";
"mov %rdx, (%rdi)" -> "mov %rdx, %rdi";
"mov %rdx, (%rdi)" -> "mov %rbx, %rdi";
"mov %rdx, (%rdi)" -> "mov %rsp, %rdi";
"mov %rdx, (%rdi)" -> "mov %rax, %rbp";
"mov %rdx, (%rdi)" -> "mov %rcx, %rbp";
"mov %rdx, (%rdi)" -> "mov %rdx, %rbp";
"mov %rdx, (%rdi)" -> "mov %rbx, %rbp";
"mov %rdx, (%rdi)" -> "mov %rsp, %rbp";
"mov %rdx, (%rdi)" -> "call fourtofive(rsp=4) -> rsp=5";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rdx, %rdi";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rbx, %rdi";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rsp, %rdi";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rax, %rbp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rcx, %rbp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rdx, %rbp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rbx, %rbp";
"call fourtofive(rsp=4) -> rsp=5" -> "mov %rsp, %rbp";
"call fourtofive(rsp=4) -> rsp=5" -> "call fivetosix(rsp=5) -> rsp=6";
"mov %rcx, (%rcx)" -> "mov %rax, %rsp";
"mov %rcx, (%rcx)" -> "mov %rcx, %rsp";
"mov %rcx, (%rcx)" -> "mov %rdx, %rsp";
"mov %rcx, (%rcx)" -> "mov %rbx, %rsp";
"mov %rcx, (%rcx)" -> "mov %rdi, %rsp";
"mov %rcx, (%rcx)" -> "mov %rbp, %rsp";
"mov %rcx, (%rcx)" -> "mov %rax, %rdi";
"mov %rcx, (%rcx)" -> "mov %rcx, %rdi";
"mov %rcx, (%rcx)" -> "call fourtofive(rsp=4) -> rsp=5";
"mov %rbx, (%rbx)" -> "mov %rdx, %rdi";
"mov %rbx, (%rbx)" -> "mov %rbx, %rdi";
"mov %rbx, (%rbx)" -> "mov %rsp, %rdi";
"mov %rbx, (%rbx)" -> "mov %rax, %rbp";
"mov %rbx, (%rbx)" -> "mov %rcx, %rbp";
"mov %rbx, (%rbx)" -> "mov %rdx, %rbp";
"mov %rbx, (%rbx)" -> "mov %rbx, %rbp";
"mov %rbx, (%rbx)" -> "mov %rsp, %rbp";
"mov %rbx, (%rbx)" -> "call fourtofive(rsp=4) -> rsp=5";
"mov %rax, (%rdx)" -> "mov %rdx, %rdi";
"mov %rax, (%rdx)" -> "mov %rbx, %rdi";
"mov %rax, (%rdx)" -> "mov %rsp, %rdi";
"mov %rax, (%rdx)" -> "mov %rax, %rbp";
"mov %rax, (%rdx)" -> "mov %rcx, %rbp";
"mov %rax, (%rdx)" -> "mov %rdx, %rbp";
"mov %rax, (%rdx)" -> "mov %rbx, %rbp";
"mov %rax, (%rdx)" -> "mov %rsp, %rbp";
"mov %rax, (%rdx)" -> "call fourtofive(rsp=4) -> rsp=5";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rdx, %rdi";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rbx, %rdi";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rsp, %rdi";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rax, %rbp";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rcx, %rbp";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rdx, %rbp";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rbx, %rbp";
"call minus1(rsp=-1) -> rsp=4" -> "mov %rsp, %rbp";
"call minus1(rsp=-1) -> rsp=4" -> "call fourtofive(rsp=4) -> rsp=5";
}